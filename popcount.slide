PopCountがGo1.7からあまりに早くなったので調べてみた
横浜Go読書会 #12
9 Dec 2017

Tooru Takahashi

@tooru

https://github.com/tooru/gopl-popcount


* 話すこと

- 経緯
- SSA形式とは
- PopCount最適化を追う
- まとめ

* 経緯

- 書籍「プログラミング言語Go」の練習問題11.6で[[https://github.com/tooru/gopl-popcount/blob/master/src/main/main.go#L16][popCount]]関数の速度を評価するという問題がある。popCountとはint64のビット列に1がいくつあるか数える関数。
- 前回の読書会で、最近のGoコンパイラは賢くなったためPopCountが速くなり問題として成立しなくなったと話題に
- ベンチマーク結果 (PopCount呼出しをループするだけ)
 go version go1.6.4 linux/amd64
 $ go test -bench .
 BenchmarkPopCount          200000000            6.89 ns/op
 
 go version go1.7.0 linux/amd64
 $ go test -bench .
 BenchmarkPopCount          2000000000           0.42 ns/op // 空関数呼び出しと同じくらい早いそうな
 
 go version go1.9.2 linux/amd64
 $ go test -bench .
 BenchmarkPopCount          2000000000           0.44 ns/op // 最新でも同じくらい


- 確かに無茶苦茶早い。Go1.7からSSA形式が導入されたからと言ってたような🤔


* SSA形式とは(1/2) 概要

- SSA形式 (Static Single Assignment Form) とは、コンパイラ内部で扱うの中間表現(IR)の1つ。SSA形式を用いるとコード最適化がやりやすい。
- 雑なコンパイラ動作説明：ソースコード→抽象構文木(AST)→アセンブリ言語
- ASTやアセンブリ言語をそのままで最適化するのは大変。ASTでは複雑。機械語はASTより情報が落ちている。
- その間にSSA形式を入れれば最適化の幅が広がる。
- 採用しているコンパイラ：LLVM、JavaVM(JIT Compiler)、WebKit、Swiftなど。日本ではCOINSが知られている。
.image slide/compiler.png

* SSA形式とは(2/2) 不要コード削除の例

- [[https://ja.wikipedia.org/wiki/%E9%9D%99%E7%9A%84%E5%8D%98%E4%B8%80%E4%BB%A3%E5%85%A5][Wikipedia SSA形式]]の例より。

 1: y := 1 # yは2行目で2が代入されるので1の代入は不要
 2: y := 2
 3: x := y

- 1行目が不要なのは人間には分かるが、そのアルゴリズムを書くのは難しい。データの流れを追う必要がある👨‍💻
- これをSSA形式にする。変数への代入文は1回のみ。再代入は新しい変数ヘの代入とする。

 1: y1 := 1 # y1はどこからも使われないので不要
 2: y2 := 2 # y2を意識しなくてもy1が不要とわかる
 3: x1 := y2
- SSA形式にしたことで、どこからも利用されていない変数を探すだけで、y1の代入が不要コードとわかる。上よりも単純なアルゴリズムで実現可能🤖

: 無限にレジスタがあるアセンブリ言語な感じ

* PopCountの最適化を追う

PopCountがどう最適化されていくか見ていく

 $ env GOSSAFUNC=PopCount go tool compile popcount.go
 $ open ssa.html # ssa形式が最適化されていく過程を見られる

.link https://htmlpreview.github.io/?https://github.com/tooru/gopl-popcount/blob/master/slide/ssa_popcount.html ssa.html (PopCount)

- 最初のSSA形式からの変化を見ると・・・

- xへのアクセスが都度メモリ経由のアクセス最初に変数(レジスタ)に入れて次からそれを再利用 (after generic cse、v16など)
- メモリアクセスを全て終えてから数値演算 (after lower、CPU archごとに変換、大きく順序が入れ替わる)

- 早くなりそうな気もするが、これで本当に早くなるのか？

* これで本当に早くなるのか？

- GoのコンパイルオプションにはSSA形式の各最適化フェーズのON/OFFを調整するオプションがある

 $ go compile -d 'ssa/generic_cse/off' PopCount.go
 $ go build -gcflags='-d=ssa/generic_cse/off' PopCount.go # これでも同じ

- ただし、いくつかの最適化フェーズはOFFにできない
[[https://github.com/golang/go/blob/release-branch.go1.9/src/cmd/compile/internal/ssa/compile.go][詳細はcmd/compile/internal/ssa/compile.go参照]] (require:trueはoffにできない)

- offにできるやつを片っ端からoffって計測

 $ go test -gcflags='-d=ssa/early_phielim/off,ssa/early_copyelim,ssa/early_deadcode/off,\
 ssa/short_circuit/off,ssa/generic_cse/off,ssa/phiopt/off,ssa/nilcheckelim/off,ssa/prove/off,\
 ssa/loopbce/off,ssa/generic_deadcode/off,ssa/check_bce/off,ssa/fuse/off,ssa/dse/off,\
 ssa/insert_resched_checks/off,ssa/tighten/off,ssa/lowered_cse/off,ssa/late_phielim/off,\
 ssa/late_copyelim/off,ssa/phi_tighten/off,ssa/late_deadcode/off,ssa/likelyadjust/off,\
 ssa/late_nilcheck/off,ssa/loop_rotate/off,ssa/trim/off' -bench .
 BenchmarkPopCount-4                    2000000000               0.81 ns/op

- 最適化ON (0.4ns)よりは遅くなったが、Go1.6.4 (6.89ns)ほど遅くない🤔

* 計測方法変更

- どうもアセンブリ言語を見ながら調べていく必要がありそう
- go test -bench だとtestライブラリが間に入るので追いづらそう
- main関数だけに描き直して計測

.code -numbers src/main/main.go /^const n =/,/^}/

 $ go run main.go
 0.41ns

- go test -benchと同じくらいの速度になった。これベースに調べていく。

* コンパイルしてアセンブリ言語を覗く (1/2)

 $ go tool compile -S main.go > main.s

PopCountはベンチマークと同じように最適化されている

.code -numbers slide/main.s /\(main.go:25\) +MOVQ/,/^ +0x001d/
.code -numbers slide/main.s /^ +0x0076/,/^ +0x008e/

* コンパイルしてアセンブリ言語を覗く (2/2)

- ついでにmainも見ておくと

.code -numbers slide/main.s /^ +0x0021.*CALL/,/^ +0x0053.*CALL/

ん？ループの中身が空っぽ。。😨

* ベンチマーク関数にもどる

.code src/popcount_test.go /^func BenchmarkPopCount/,/^}/

 $ env GOSSAFUNC=BenchmarkPopCount go test -gcflags=-S -bench .

.code slide/popcount_test.popcount.s

- こちらも空ループに置き換わっている。その理由は[[https://htmlpreview.github.io/?https://github.com/tooru/gopl-popcount/blob/master/slide/ssa_popcount_test.html][ssa.html]] を見ると分かる。


* 何が起きていたのか

- PopCount呼び出しがループ内にインライン展開されSSA最適化フェーズで不要コードと判断されて消える🙃 
- 最適化後のBenchmarkPopCountのイメージ
 func BenchmarkPopCount(b *testing.B) {
     for i := 0; i < b.N; i++ {
         //popCount(0x1234567890ABCDEF) // 最適化により消滅
     }
 }
- つまりpopcount_testはGo1.7以降正しく計測できていない😱
- 空関数呼び出しと同じ速度になるわけである
- 正しく測定するためには工夫が必要。



* 再測定案 (1/2) インライン展開Off

- インライン化を抑制。-gcflags='-l' をつければインライン展開されない。
- 関数呼び出しによるオーバヘッドが大きい。

 $ go test -gcflags='-l' -bench . 
 BenchmarkPopCount              200000000                8.58 ns/op (Go1.6.4)★
 BenchmarkPopCount              200000000                6.71 ns/op (Go1.7)
 BenchmarkPopCount              200000000                5.81 ns/op (Go1.9.2)

- 再掲 (最初の計測結果)

 BenchmarkPopCount              200000000                6.89 ns/op (Go1.6.4)★
 BenchmarkPopCount              2000000000               0.42 ns/op (Go1.7)  
 BenchmarkPopCount              2000000000               0.44 ns/op (Go1.9.2)

- 条件によっては使い道があるかもしれない
- なお、Go1.6でもインライン展開はしていたため遅くなっている(★)。

* 再測定案 (2/2) dead code と見なされないようにする。

- 戻り値を使っていないとコンパイラに不要と判断されてしまうので最後にグローバル変数に代入する。作為的な代入により多少性能に影響するが、やむなしか。

.code src/popcount_test.go /^var benchResult int/,/^}$/
 BenchmarkPopCount2              200000000                7.20 ns/op (Go1.6.4)
 BenchmarkPopCount2              300000000                3.99 ns/op (Go1.7)
 BenchmarkPopCount2              1000000000               2.03 ns/op (Go1.9.2)

- ようやく比べられるようになった
- Go1.7およびGo1.9.2で何が最適化されたかは、Appendix1,2参照


* 💡補足 (11.6を解くために)

- 練習問題11.6はPopCountの配列初期化を含めた時間が試行回数を増やすことで、効率の悪いアルゴリズム(シフトやビット反転版)をいつ頃から追い抜くかを調べるというもの。
- 今回単純なループを計測したが、実際には以下の関数と効率の悪いアルゴリズムを計測し比較する必要がある。

.code -numbers src/popcount_test.go /^func benchmarkPopCount\(/,/^}/

- このコードもPopCount関数呼び出しは最適化で消去されるため工夫が必要
- 前段の配列pc初期化ループは最適化で消えなかった (Go1.9.2)


* まとめ

✅️⃣ Benchmarkはコンパイラの最適化処理によって正しく計測できない場合がある。

- 今回のようにdead codeと判断されることがある。
- 極端に速くなったらアセンブリ言語を確認する。

✅⃣ 練習問題11.6は、コンパイラの気持ちになって最適化を避けつつ、条件を設定して解く必要がある。なかなかの難問である。


* 他やっていて気づいた点

1️⃣ GoのコンパイラがGoで書かれている

-  コンパイラ自身がGoで書かれているのでコンパイラのコードも読めなくはない。これなら読んでみようかなという気にはなる。(扱う内容がそもそも難しいが)

2️⃣ BitCount関数は極限まで最適化されている

- BitCount関数 (Hacker's Delight版)も同様に関数呼び出しが消滅していたため戻り値を変数に代入して再計測した。
- それでもあまりに早い (空関数呼び出し並) のでアセンブリコードを確認したところ最適化によりコンパイル時に戻り値(答え)が計算されていた。
- ループで毎回レジスタに即値32(0x1234567890ABCDEFのビットが1の数)を代入するコードが生成されている。コンパイラ恐るべし。
- 詳細はAppendix3参照

* 参考文献

- [[https://golang.org/doc/go1.7#compiler][Go 1.7 Release Notes #Compiler Toolchain]]
- [[https://en.wikipedia.org/wiki/Static_single_assignment_form][Static single assignment form - Wikipedia]]
- [[https://shinpei.github.io/blog/2016/08/13/what-ssa-brings-to-go-17][Go1.7からSSAが導入された - flyhigh]]
- [[https://docs.google.com/document/d/1szwabPJJc4J-igUZU4ZKprOrNRNJug2JPD8OYi3i1K0][New SSA Backend for the Go Compiler]]

* Appendix1. Go1.7の BenchmarkPopCount2 のアセンブリコード

.code -numbers slide/BenchmarkPopCount2-1.7.s /^    0x0005/,/^    0x0048/

- (1)pcのアドレスを8回取得するのではなく、一旦レジスタ(CX)に格納し再利用
- (2)インライン展開によって引き数(0x1234567890ABCDEF)の各バイトをビットシフトした値がコンパイル時に計算されている。
- 参考:  [[https://htmlpreview.github.io/?https://github.com/tooru/gopl-popcount/blob/master/slide/ssa_benchpopcount2_1.7.html][ssa.html]]

* Appendix2. Go1.9.2の BenchmarkPopCount2 のアセンブリコード

.code -numbers slide/BenchmarkPopCount2-1.9.2.s /^    0x0005/,/^    0x004c/

- インデックスを一旦レジスタに入れることなく、MOVBLZX 1命令に。
- 参考:  [[https://htmlpreview.github.io/?https://github.com/tooru/gopl-popcount/blob/master/slide/ssa_benchpopcount2_1.9.2.html][ssa.html]]

: MOVBLZX MOV Byte to Long?(word) with Zero Extension メモリのバイトをワードサイズのレジスタに0拡張して格納、だと思う

* Appendix3. Go1.9.2の BenchmarkBitCount2 最適化 (1/2)

.code -numbers src/popcount.go /^func bitCount/,/^}/

.code -numbers slide/BenchmarkBitCount2-1.9.2.s /^    0x000a/,/^    0x0020/

- インライン展開によってコンパイル時に答えが計算されている。ループで毎回レジスタに即値32を代入しているだけ。
- 参考:  [[https://htmlpreview.github.io/?https://github.com/tooru/gopl-popcount/blob/master/slide/ssa_benchbitcount2_1.9.2.html][ssa.html]] 「after opt」で答えが計算されている。

* Appendix3. Go1.9.2の BenchmarkBitCount2 最適化 (2/2)

- bitCount最適化後のイメージ

 var benchResult int
 
 func BenchmarkBitCount2(b *testing.B) {
     var c int
     for i := 0; i < b.N; i++ {
         c = 32 //bitCount(0x1234567890ABCDEF)
     }
     benchResult = c
 }

* 読書会#12での質問

❓空ループはなぜ最適化で消えないのか

- できるのかもしれませんが、空ループであることの判別が難しい気がします。
- [[https://github.com/tooru/gopl-popcount/blob/master/src/main/main.go#L74][src/main/main.go]]のmain関数の[[https://htmlpreview.github.io/?https://github.com/tooru/gopl-popcount/blob/master/slide/ssa_main_1.9.2.html][ssa.html]]の「after trim」を参照 (右から2番目)。空ループとはいえ結構複雑です。

 b1:
  ...
  v66 = MOVQconst <int> [0] : BX           ; i = 0
 Plain → b2                                ; goto b2

 b4: ← b2                                  ; b4にはb2から飛んでくる
  v80 = ADDQconst <int> [1] v8 : BX        ; i++
 Plain → b2                                ; goto b2
 
 b2: ← b1 b4                               ; b2にはb1かb4から飛んでくる
  v8 = Phi <int> v66 v80 : BX           ; v8にはv66/v80どちらかが入る (v66とv80は同じレジスタを使うという制約)
  v116 = CMPQconst <flags> [2000000000] v8 ; i < 2000000000
 LT v116 → b4 b8 (likely)                  ; i < 2000000000 then goto b4 else b8

- 空ループと判定する汎用アルゴリズムを書くのは難しいのでは(予想です)。
